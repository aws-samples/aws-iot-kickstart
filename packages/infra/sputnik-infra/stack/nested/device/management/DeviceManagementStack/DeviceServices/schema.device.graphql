type ConnectionState @aws_iam @aws_cognito_user_pools {
	state: String!
	at: AWSDateTime!
}

type Device @aws_iam @aws_cognito_user_pools {
	thingId: String!
	thingName: String!
	thingArn: String!
	name: String!
	# Namespace used to prefix iot device events and partition events for multi-tenancy
	namespace: String
	deviceTypeId: String!
	deviceBlueprintId: String!
	connectionState: ConnectionState
	greengrassGroupId: String!
	spec: AWSJSON
	metadata: AWSJSON
	lastDeploymentId: String
	certificateArn: String
		@aws_iam
		@aws_cognito_user_pools(cognito_groups: ["Administrators", "Members"])
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
}

type PaginatedDevices @aws_iam @aws_cognito_user_pools {
	devices: [Device]
	nextToken: String
}

type Certificate
	@aws_iam
	@aws_cognito_user_pools(cognito_groups: ["Administrators", "Members"]) {
	certificateArn: String!
	certificateId: String!
	certificatePem: String!
}

extend type Query {
	listDevices(limit: Int, nextToken: String): PaginatedDevices

	listDevicesOfDeviceType(
		deviceTypeId: String!
		limit: Int
		nextToken: String
	): PaginatedDevices

	listDevicesWithDeviceBlueprint(
		deviceBlueprintId: String!
		limit: Int
		nextToken: String
	): PaginatedDevices

	getDevice(thingId: String!): Device @aws_iam @aws_cognito_user_pools

	getDeviceStats: DeviceStat
}

extend type Mutation {
	addDevice(
		name: String!
		deviceTypeId: String!
		deviceBlueprintId: String!
	): Device!

	deleteDevice(thingId: String!): Device

	updateDevice(
		thingId: String!
		name: String!
		deviceTypeId: String!
		deviceBlueprintId: String!
		spec: AWSJSON!
		namespace: String
		metadata: AWSJSON
	): Device!

	createCertificate(csr: String!, thingId: String!): Certificate!

	updateDeviceNamespace(
		thingId: String!
		# Allow null to remove value
		namespace: String
	): Device!
}

extend type Subscription {
	addedDevice: Device @aws_subscribe(mutations: ["addDevice"])

	updatedDevice: Device
		@aws_subscribe(mutations: ["updateDevice", "updateDeviceNamespace"])

	deletedDevice: Device @aws_subscribe(mutations: ["deleteDevice"])
}
